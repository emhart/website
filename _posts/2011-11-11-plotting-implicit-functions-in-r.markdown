---
layout: post
title: "Plotting implicit functions in R"
date: 2011-11-11
comments: false
tags:
 - ggplot2
 - code example
 - math
 - R
---

<div class='post'>
So in prepping for my latest manuscript on population dynamics I have been creating all the necessary figures. &nbsp;One of them I considered was a 2-d surface plot of a modified Ricker equation showing the transitions from extinction stability, and stability to limit cycles. &nbsp;Inconveniently though the only way to do this is with an implicit function. &nbsp;Since becoming a fully <a href="http://had.co.nz/ggplot2/" target="_blank">ggplot2</a> convert, I wanted to be able to do it in ggplot2. Let's start with a simple definition so we're all clear.  Here's an explicit function.  \[y=2^2+x^2\]  It's explicit because <i>y</i> is stated explicitly in terms of <i>x</i>, i.e. \[f(x)=2^2+x^2\]  Yet sometimes its not possible to define <i>y</i> explicitly in terms of <i>x</i>.  Implicit functions are formally defined as equations that satisfy the condition: \[R(x,y)=0\] A good example is the unit circle. The unit circle can be found in the equation: \[f(x,y)=x^2+y^2\] And unit circle is created when: \[f(x,y)=1\]  Therefore we can draw the unit circle using the equation: \[x^2+y^2=1\] \[x^2+y^2-1=0\] This is the implicit function for the unit circle.  You can solve it explicitly for <i>y</i>, but it requires two functions. \[y=\sqrt{1-x^2},   y=-\sqrt{1-x^2}\]  So, if you have an implicit function you want to plot, how could you do it in R?  The easy answer is to numerically solve your equation over a specific range, but then how can you plot it?  <br /><pre class="brush:python" name="code">my.fun &lt;- function(x,y){y^2+x^2 -1}<br />x&lt;-seq(-1.5,1.5,length=1000)<br />y&lt;-seq(-1.5,1.5,length=1000)<br />z&lt;-outer(x,y,my.fun)<br />contour(x,y,z,level=0)<br /></pre><br /><br />That will produce a graph that looks like the figure on the left, whereas the figure on the right was created with the function I wrote called imp.solve().  <br /><br /><pre class="brush:python" name="code">my.fun &lt;- function(x,y){y^2+x^2 -1}<br />to.plot &lt;- imp.solve(x,y,my.fun)<br />#Plot with ggplot<br />ggplot(to.plot,aes(x=x,y=y))+geom_point()+xlim(range(x))+ylim(range(y))<br /></pre><br /><br /><br /><center><table><tbody><tr><td><div class="separator" style="clear: both; text-align: right;"><a href="http://3.bp.blogspot.com/-P0c7KO_cW2g/TsKeMy1kXqI/AAAAAAAAC44/2uJu9ieGhNY/s1600/Circle.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="200" src="http://3.bp.blogspot.com/-P0c7KO_cW2g/TsKeMy1kXqI/AAAAAAAAC44/2uJu9ieGhNY/s200/Circle.png" width="200" /></a></div></td><td><div class="separator" style="clear: both; text-align: right;"><a href="http://1.bp.blogspot.com/-PhjO9oGLZkE/TsKzOS714II/AAAAAAAAC5A/q4Lyw93u7ik/s1600/Circle2.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="200" src="http://1.bp.blogspot.com/-PhjO9oGLZkE/TsKzOS714II/AAAAAAAAC5A/q4Lyw93u7ik/s200/Circle2.png" width="200" /></a></div></td></tr></tbody></table></center>The first example produces a quick and dirty plot that is all fine and good, but its a surface plot. That means you're stuck with the "0" on the line denoting the surface is only drawing areas where 0 is.&nbsp;On top of that you lose lots of other control over what you can draw and what if you you want to use ggplot2, or some other package, or you actually want to know what the numerical answer is?&nbsp;My function parses<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-hqa3CUWFWAc/TsK2B11u8NI/AAAAAAAAC5I/mPFzCl6B-T0/s1600/ex3.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="200" src="http://3.bp.blogspot.com/-hqa3CUWFWAc/TsK2B11u8NI/AAAAAAAAC5I/mPFzCl6B-T0/s200/ex3.png" width="200" /></a></div>&nbsp;the output from the outer() function and returns a dataframe you can easily plot in ggplot2. It can handle most polynomial functions, although I'll leave you in charge of ordering your own output for line plots in scenarios with multiple x's at the same y point. Here's another example with a cubic function. \[x^3+y^3-1=0\]<br /><br /><br /><br /><br /><br /><br /><div style="text-align: center;"><b>An ecological example</b></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-Ye6VDv-4_ck/TsK3oXR9pbI/AAAAAAAAC5Q/dJRM3oCKIKg/s1600/Untitled.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"><img border="0" height="400" src="http://1.bp.blogspot.com/-Ye6VDv-4_ck/TsK3oXR9pbI/AAAAAAAAC5Q/dJRM3oCKIKg/s400/Untitled.png" width="290" /></a></div>So why does this matter in ecology?  Often you might want to create a surface plot for transitions between stable states and unstable states in with a discrete time equation.  Here's an example from my own work.  I'm trying to recreate a figure such as this from a paper by <a href="http://domingo.zoology.ubc.ca/AvilesLab/reprints/Aviles.1999.EER.pdf">Aviles 1999</a>. Here is the figure at right.  The function is a modified Ricker equation: \[N_{t+1}={N_t}^{(1+\gamma)}e^{(-c+N_t)}e^r\] Here gamma is the allee effect term, c is the strength of density dependence and r is the population growth rate.  Both gamma and r are bifurcation points and we can use an implicit function to draw the boundaries between say stability and extinction at a constant c.  So while implicit functions aren't the most common thing to come across in ecology, they do arise with some mathematical models.  In this example the transition between stability and extinction is given by the equation: \[ce^{(\gamma - r)}-\gamma=0\] Holding c constant at .01, the following code will generate our figure.  <pre class="brush:python" name="code"><br />##########First set up the parameters to vary over########<br />y<-seq(0.01,.9,length=1000)<br />x<-seq(-2,8,length=1000)<br />###################Define the function############<br />my.fun <- function(x,y){.01*exp((y-x)/y)-y }<br />to.plot <- imp.solve(x,y,my.fun)<br /><br />ggplot(to.plot,aes(x=x,y=y))+geom_line()<br /></pre> <div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-HUB_sjPMDo0/TsK6pKb8sGI/AAAAAAAAC5c/QnkhsbgmXOc/s1600/Untitled2.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="200" width="200" src="http://1.bp.blogspot.com/-HUB_sjPMDo0/TsK6pKb8sGI/AAAAAAAAC5c/QnkhsbgmXOc/s200/Untitled2.png" /></a></div> This is the same as the the first line in the above figure from the paper.  You can find the <a href="https://github.com/emhart/Misc_Func/blob/master/Imp.solve.R">full code for this function </a>over at <a href="https://github.com/emhart">my github page</a> as Imp.solve.R.  So while a previously quick and dirty solution existed in R, here is an improved version with greater plotting flexibility.  Happy implicit function graphing!</div>
