---
layout: post
title: "Monty Hall meets a python"
date: 2012-02-20
comments: false
tags:
 - statistics
 - conditional probability
 - python
 - code example
 - MCMC
---

<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><object width="320" height="266" class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://1.gvt0.com/vi/qVLvDqZPgK0/0.jpg"><param name="movie" value="http://www.youtube.com/v/qVLvDqZPgK0&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/qVLvDqZPgK0&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br />Ahh, the Monty Hall problem. A classic problem that begins many statistics classes involving conditional probabilities.  I first learned about it in my Bayesian statistics class in grad school, and I've seen it many times since.  The problem in a nutshell is that imagine you are on the gameshow "Let's make a deal".  You are presented with three doors, one has a car behind it, the other two goats.  You choose your door and Monty Hall reveals one other door that does not have the prize behind it.  Now you have a choice, you can either stick with your original door, or switch.  The question is, what should you do to maximize your chances of winning the car? Intuition says that your odds are 50/50 after he eliminates the door, so it doesn't matter.  But if that was the case it wouldn't be a famous problem.  No instead if you stick withy our answer your odds of winning the car are 1/3, and 2/3's if you switch.  One can arrive at this easily enough through a variety of methods (see the <a href="http://en.wikipedia.org/wiki/Monty_Hall_problem">Wikipedia</a> page on the problem), but an easy way to arrive at these conclusions is via simulation.   <br><br>I recently stumbled upon a blog by Corey Chivers on called <a href="http://bayesianbiologist.com/">bayesianbiologist</a> and I was reading through some of his posts and I came across his <a href="http://bayesianbiologist.com/2012/02/03/monty-hall-by-simulation/">R code</a> (very elegant code I might add) for simulating this problem.  I had done this years ago but currently I'm trying to expand my horizons beyond R and a work on other languages.  Currently I'm interested in Python so I decided now that I've got <a href="http://www.scipy.org/Installing_SciPy/Mac_OS_X">NumPy/SciPy/matplotlib</a> up and running with <a href="http://www.eclipse.org/downloads/">Eclipse</a> I thought I would write a version in Python.  Its certainly not the most elegant code, but it was interesting writing something I could bang out in 10 minutes in R in a different language.  You realize that how you would do something in R frames the way you think about problems.  Seeing how constrained my thought process was makes a good case for learning other programming languages.  I hope that it will give me a broader perspective about how to approach computational problems. You can see my full code <a href="https://github.com/emhart/Misc_Func/blob/master/MontyHall.py">here at my git</a>, or below.  As its written now, it runs 100 simulations 1000 times and produces a histogram of the probability of winning the car.  <pre class="brush:python" name="code"><br /><br />'''<br />Python version of the Monty Hall problem<br />by EM Hart 2/20/2012<br />Change scenario by changing the code <br />in strat_dictionary (0,1,2)<br /><br />'''<br /><br />#from matplotlib import pyplot<br />import numpy.random as np<br />import numpy<br />from scipy import *<br />from matplotlib import pyplot<br /><br />#create an array for Wins<br />pwins = zeros(1000)<br />#####Create an an array of all possible values<br />potential = array([1,2,3])<br />#####Change this to change your strategy<br />strat_dict = ["Stay","Switch","Random"]<br />master_strat = strat_dict[2]<br />for k in range(1000):<br />    wins = zeros(100)<br /><br />    for i in range(100):<br /><br />####Assign a prize value<br />        prize = np.random_integers(1,3,1)<br />###Now make a guess<br />        guess = np.random_integers(1,3,1)<br />   <br />    <br />####Now we need to figure out which of the doors are revealed<br />        if prize == guess:<br />            reveals = potential[where(prize!=potential)]<br />            reveals = reveals[np.random_integers(0,1,1)]<br />####Here is where I might have used which in R<br />        if prize != guess:<br />            reveals = potential[where(prize!=potential)]<br />            reveals = reveals[where(guess != reveals)]<br />####This formulation allows me to have Random strategy<br />        if master_strat == "Random":<br />            strat = strat_dict[np.random_integers(0,1,1)]<br />        if master_strat == "Stay":<br />            strat = "Stay"<br />        if master_strat == "Switch":<br />            strat = "Switch"<br />        <br />#Now its simple if we just stay       <br />        if strat == "Stay":<br />            guess = guess<br />####Switch is a bit more complicated, this is a very inelegant solution compared to R<br />        if strat == "Switch":<br />            switch = concatenate((guess,reveals))<br />            for j in range(3):<br />                exc = potential[j] in switch<br />                if exc==False:<br />                    guess = potential[j]<br /><br />        <br />    <br />        if guess == prize:<br />            wins[i]=1<br /><br />        pwins[k]= wins.sum()<br />        <br /><br />pwins = pwins/1000<br />pyplot.hist(pwins,100)<br /><br />pyplot.show()<br /></pre></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Likelihood T. Prior</div>
<div class='content'>
Cool python implementation! Thanks for the shout out :)</div>
</div>
</div>
